const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const { connectDB } = require("./db.config");
const cors = require("cors");
const path = require("path");
const errorHandler = require("./middlewares/ErrorHandlingMiddleware");
const fileUpload = require("express-fileupload");
const router = require("./routes/index");
const Category = require("./models/category.model");
const Cart = require("./models/cart.model");
const token = "6010021020:AAGDrMwHEe_8Y0O7XJxpfWo2hyHnRBHcFW4";
const url = "https://bade-95-105-69-54.ngrok-free.app";
const bot = new TelegramBot(token, { polling: true });

function numberWithSpaces(nr) {
  return nr.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}

const corsOptions = {
  origin: "*",
  credentials: true,
  optionSuccessStatus: 200,
};
connectDB();
const app = express();
app.use(cors(corsOptions)); 
app.use(express.json());
app.use(fileUpload({}));
app.use(express.static(path.resolve(__dirname, "static")));
app.use("/api", router);
app.use(errorHandler);

app.listen(5000, () => console.log(`server started`));
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text == "/start") {
    await bot.sendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", {
      reply_markup: {
        keyboard: [
          [{ text: "–ö–∞—Ç–∞–ª–æ–≥ üìÇ" }, { text: "–ö–æ—Ä–∑–∏–Ω–∞ üìÆ" }, { text: "–ø—Ä–æ—Ñ–∏–ª—å üôã" }],
          [{ text: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ùì" }, { text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß" }],
          [{ text: "–û—Ç–∑—ã–≤—ã üì¢" }],
        ],
      },
    });
  }

  if (text == "–û—Ç–∑—ã–≤—ã üì¢") {
    await bot.sendMessage(chatId, "–û—Ç–∑—ã–≤—ã", {
      reply_markup: {
        keyboard: [
          [{ text: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" }, { text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã" }],
        ],
      },
    });
  }

  if (text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤") {
    const reviewNumber = await bot.sendMessage(
      msg.chat.id,
      "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤",
      {
        reply_markup: {
          force_reply: true,
        },
      }
    );
    bot.onReplyToMessage(msg.chat.id, reviewNumber.message_id, async (phoneMsg) => {
      const phone = phoneMsg.text;
      // save name in DB if you want to ...
      await bot.sendMessage(msg.chat.id, `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤!`);
  });
  }
  
  if (text == "–ö–∞—Ç–∞–ª–æ–≥ üìÇ") {
    const categories = await Category.find();
    await bot.sendMessage(chatId, "–ö–∞—Ç–∞–ª–æ–≥", {
      reply_markup: {
        inline_keyboard: categories.map((item) => [
          { text: item.title, web_app: { url: url + "/" + item.title } },
        ]),
      },
    });
  }

  if (text == "–ø—Ä–æ—Ñ–∏–ª—å üôã") {
    await bot.sendMessage(chatId, `
    –ò–º—è: –ê–ª—å–±–µ—Ä—Ç
–¢–µ–ª–µ—Ñ–æ–Ω: +79179166659
–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: –≥. –ö–∞–∑–∞–Ω—å —É–ª –†–∏—Ö—Ä–¥–∞ –ó–æ—Ä–≥–µ 32 –∫.2 –∫–≤ 58`)
  }


  if (text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ùì") {
    // await bot.sendMessage(chatId ,"–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    const questionNumber = await bot.sendMessage(
      msg.chat.id,
      "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å",
      {
        reply_markup: {
          force_reply: true,
        },
      }
    );
    bot.onReplyToMessage(msg.chat.id, questionNumber.message_id, async (msg) => {
      const question = msg.text;
      // save name in DB if you want to ...
      await bot.sendMessage(msg.chat.id, `–≤–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`);
  });
  }


  if (text == "–ö–æ—Ä–∑–∏–Ω–∞ üìÆ") {
    let cart = await Cart.findOne({ userName: msg.from.first_name }).populate(
      "items"
    );
    console.log(cart);
    if (cart) {
      cart.items.forEach((element) => {
        bot
          .sendPhoto(
            chatId,
            `https://2a86-95-105-69-54.ngrok-free.app/${element.picture}`,
            {
              caption: `${element.name} 
–¶–µ–Ω–∞: ${numberWithSpaces(element.cost)} ‚ÇΩ
–†–∞–∑–º–µ—Ä: S`,
              reply_markup: {
                inline_keyboard: [[{ text: "‚ùå", callback_data: element._id }]],
              },
            }
          )
          .then((data) => console.log(data));
      });
    } else {
      bot.sendMessage(
        chatId,
        `–í –∫–æ—Ä–∑–∏–Ω–µ –ø—É—Å—Ç–æ üòî
      –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ö–∞—Ç–∞–ª–æ–≥, —Ç–∞–º –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ`
      );
    }
    // console.log(cart);
    // return res.json(cart)
  }

  if (text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß") {
    await bot.sendMessage(chatId, "–ù–∞ —Å—Ç—Ä–æ–π–∫–∏", {
      reply_markup: {
        keyboard: [
          [{ text: "–¢–µ–ª–µ—Ñ–æ–Ω" }, { text: "–ê–¥—Ä–µ—Å" }],
          [{ text: "–ò–º—è" }, { text: "–°–ø–æ—Å–æ–±–æ –æ–ø–ª–∞—Ç—ã" }],
        ],
      },
    });
  }

  if (text == "–¢–µ–ª–µ—Ñ–æ–Ω") {
    const phoneNumber = await bot.sendMessage(
      msg.chat.id,
      "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
      {
        reply_markup: {
          force_reply: true,
        },
      }
    );
    bot.onReplyToMessage(msg.chat.id, phoneNumber.message_id, async (phoneMsg) => {
      const phone = phoneMsg.text;
      // save name in DB if you want to ...
      await bot.sendMessage(msg.chat.id, `–≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ${phone}!`);
  });
  }

  if (text == "–ê–¥—Ä–µ—Å") {
    const adressNumber = await bot.sendMessage(
      msg.chat.id,
      "–í–∞—à –∞–¥—Ä–µ—Å",
      {
        reply_markup: {
          force_reply: true,
        },
      }
    );
    bot.onReplyToMessage(msg.chat.id, adressNumber.message_id, async (adressMsg) => {
      const adress = adressMsg.text;
      // save name in DB if you want to ...
      await bot.sendMessage(msg.chat.id, `–≤–∞—à –∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ${adress}!`);
  });
  }

  if (text == "/–ò–º—è") {
    const namePrompt = await bot.sendMessage(
      msg.chat.id,
      "–í–∞—à–µ –∏–º—è ?",
      {
        reply_markup: {
          force_reply: true,
        },
      }
    );
    bot.onReplyToMessage(msg.chat.id, namePrompt.message_id, async (nameMsg) => {
      const name = nameMsg.text;
      // save name in DB if you want to ...
      await bot.sendMessage(msg.chat.id, `–í–∞—à–µ –∏–º—è ${name}!`);
  });
  }

  bot.on("callback_query", async (msg) => {
    console.log(msg);
    let cart = await Cart.findOne({ userName: msg.from.first_name }).populate(
      "items"
    );
    cart.items = cart.items.filter((item) => item._id != msg.data);
    await cart.save();
    await bot.sendMessage(chatId, `–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã 
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ ${cart.items.length}`)
  });
});
